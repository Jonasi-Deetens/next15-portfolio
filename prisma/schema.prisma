// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  password      String?      // For credentials authentication
  emailVerified DateTime?
  image         String?
  role          UserRole     @default(USER)
  status        UserStatus   @default(ACTIVE)
  lastLoginAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  installedApps InstalledApp[]
  activityLogs  ActivityLog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// App Registry System
model AppDefinition {
  id            String         @id @default(cuid())
  name          String         @unique // Internal name (e.g., "crm")
  displayName   String         // Display name (e.g., "Customer Relationship Management")
  description   String
  version       String
  category      String
  icon          String?
  route         String         // Base route for the app (e.g., "/apps/crm")
  isActive      Boolean        @default(true)
  isPublic      Boolean        @default(true) // If false, only admins can see/install
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  installedApps InstalledApp[]
}

model InstalledApp {
  id          String        @id @default(cuid())
  userId      String
  appId       String
  settings    Json?         // App-specific configuration
  isEnabled   Boolean       @default(true)
  installedAt DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  app         AppDefinition @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([userId, appId])
  @@index([userId])
}

// Activity Logging
model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String   // e.g., "user.login", "app.install", "user.update"
  entityType  String?  // e.g., "User", "App", "Post"
  entityId    String?
  metadata    Json?    // Additional context
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}
